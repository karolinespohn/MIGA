from django.contrib import admin
from django.contrib import messages
from django.contrib.auth import get_user_model
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.contrib.auth.forms import UserChangeForm, UserCreationForm
from django.utils import timezone
from .models import Assignment, Performance, Award, UserAward

User = get_user_model()


# cutsom admin forms if needed
class CustomUserChangeForm(UserChangeForm):
    class Meta:
        model = User
        fields = '__all__'


class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = User
        fields = ('email', 'first_name', 'last_name')


@admin.register(User)
class UserAdmin(BaseUserAdmin):
    form = CustomUserChangeForm
    add_form = CustomUserCreationForm

    list_display = ('username', 'hidden_username', 'email', 'is_staff')

    # edit existing users
    fieldsets = (
        (None, {'fields': ('username', 'password')}),
        ('Personal info', {'fields': ('first_name', 'last_name', 'email', 'hidden_username')}),
        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        ('Important dates', {'fields': ('last_login', 'date_joined')}),
    )

    # adding new users
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'email', 'first_name', 'last_name', 'password1', 'password2'),
        }),
    )

    search_fields = ('username', 'first_name', 'last_name', 'email')
    ordering = ('username',)
    readonly_fields = ('hidden_username',)  # Only make hidden_username readonly. This is autogenerated

    actions = ['give_demonstration_dodo_badge']

    def give_demonstration_dodo_badge(self, request, queryset):
        """
        Custom action to give the Demonstration Dodo badge to selected users.
        This shoudl be awarded to each student who presents in class. I
        It can be found in the admin view like so:
        - Users
        - Select all users that presented that day
        - Choose action "Give Demonstration Dodo badge to selected users"
        """
        try:
            demonstration_dodo = Award.objects.get(name='Demonstration Dodo')

            count = 0

            for user in queryset:
                # Check if user already has badge
                user_award, created = UserAward.objects.get_or_create(
                    user=user,
                    award=demonstration_dodo,
                    defaults={'earned_date': timezone.now()}
                )

                if created:
                    count += 1

            if count > 0:
                messages.success(request, f'Aawrded the Demonstration Dodo badge to {count} user(s).')
            else:
                messages.info(request, 'All selected users already have the Demonstration Dodo badge.')

        except Award.DoesNotExist:
            messages.error(request, 'Run initialize_awards() first.')

    give_demonstration_dodo_badge.short_description = "Give Demonstration Dodo badge to selected users"


@admin.register(Assignment)
class AssignmentAdmin(admin.ModelAdmin):
    list_display = ('name', 'end_date')
    search_fields = ('name', 'description')
    list_filter = ('end_date',)


@admin.register(Performance)
class PerformanceAdmin(admin.ModelAdmin):
    list_display = ('user', 'assignment', 'score', 'completion_time', 'submission_time')
    list_filter = ('assignment', 'submission_time')
    search_fields = ('user__username', 'assignment__name')
    ordering = ('-submission_time',)

    def get_queryset(self, request):
        return super().get_queryset(request).select_related('user', 'assignment')


@admin.register(Award)
class AwardAdmin(admin.ModelAdmin):
    list_display = ('name', 'description', 'image_name')
    search_fields = ('name', 'description')
    ordering = ('name',)


@admin.register(UserAward)
class UserAwardAdmin(admin.ModelAdmin):
    list_display = ('user', 'award', 'earned_date')
    list_filter = ('award', 'earned_date')
    search_fields = ('user__username', 'award__name')
    ordering = ('-earned_date',)
    date_hierarchy = 'earned_date'

    def get_queryset(self, request):
        return super().get_queryset(request).select_related('user', 'award')
